/*
 * generated by Xtext 2.14.0
 */
package nl.sudohenk.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateDefGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_0_1 = (UnorderedGroup)cGroup_2_0.eContents().get(1);
		private final Assignment cGlobalStructsAssignment_2_0_1_0 = (Assignment)cUnorderedGroup_2_0_1.eContents().get(0);
		private final RuleCall cGlobalStructsMessageStructParserRuleCall_2_0_1_0_0 = (RuleCall)cGlobalStructsAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cGlobalEnumsAssignment_2_0_1_1 = (Assignment)cUnorderedGroup_2_0_1.eContents().get(1);
		private final RuleCall cGlobalEnumsMessageEnumParserRuleCall_2_0_1_1_0 = (RuleCall)cGlobalEnumsAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cMessagesAssignment_2_0_1_2 = (Assignment)cUnorderedGroup_2_0_1.eContents().get(2);
		private final RuleCall cMessagesMessageParserRuleCall_2_0_1_2_0 = (RuleCall)cMessagesAssignment_2_0_1_2.eContents().get(0);
		private final Keyword cInitialKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cInitStateAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cInitStateStateParserRuleCall_2_0_3_0 = (RuleCall)cInitStateAssignment_2_0_3.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_2_1_0 = (RuleCall)cStatesAssignment_2_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cTransitionsMessageTransitionParserRuleCall_2_2_0 = (RuleCall)cTransitionsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cEndKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cEndStateAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cEndStateStateParserRuleCall_2_3_1_0 = (RuleCall)cEndStateAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		
		//// State machine
		//StateMachine:
		//	'machine' name=ID ('{' (globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*)
		//	// Finite State Machine description
		//	'initial' initState=State & states+=State* & transitions+=MessageTransition* &
		//	'end' endState=State
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID ('{' (globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*) // Finite State Machine description
		//'initial' initState=State & states+=State* & transitions+=MessageTransition* & 'end' endState=State '}')?
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' (globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*) // Finite State Machine description
		//'initial' initState=State & states+=State* & transitions+=MessageTransition* & 'end' endState=State '}')?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//'{' (globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*) // Finite State Machine description
		//'initial' initState=State
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }
		
		//// Message Structure description
		//globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*
		public UnorderedGroup getUnorderedGroup_2_0_1() { return cUnorderedGroup_2_0_1; }
		
		//globalStructs+=MessageStruct*
		public Assignment getGlobalStructsAssignment_2_0_1_0() { return cGlobalStructsAssignment_2_0_1_0; }
		
		//MessageStruct
		public RuleCall getGlobalStructsMessageStructParserRuleCall_2_0_1_0_0() { return cGlobalStructsMessageStructParserRuleCall_2_0_1_0_0; }
		
		//globalEnums+=MessageEnum*
		public Assignment getGlobalEnumsAssignment_2_0_1_1() { return cGlobalEnumsAssignment_2_0_1_1; }
		
		//MessageEnum
		public RuleCall getGlobalEnumsMessageEnumParserRuleCall_2_0_1_1_0() { return cGlobalEnumsMessageEnumParserRuleCall_2_0_1_1_0; }
		
		//messages+=Message*
		public Assignment getMessagesAssignment_2_0_1_2() { return cMessagesAssignment_2_0_1_2; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_2_0_1_2_0() { return cMessagesMessageParserRuleCall_2_0_1_2_0; }
		
		//// Finite State Machine description
		//'initial'
		public Keyword getInitialKeyword_2_0_2() { return cInitialKeyword_2_0_2; }
		
		//initState=State
		public Assignment getInitStateAssignment_2_0_3() { return cInitStateAssignment_2_0_3; }
		
		//State
		public RuleCall getInitStateStateParserRuleCall_2_0_3_0() { return cInitStateStateParserRuleCall_2_0_3_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_2_1_0() { return cStatesStateParserRuleCall_2_1_0; }
		
		//transitions+=MessageTransition*
		public Assignment getTransitionsAssignment_2_2() { return cTransitionsAssignment_2_2; }
		
		//MessageTransition
		public RuleCall getTransitionsMessageTransitionParserRuleCall_2_2_0() { return cTransitionsMessageTransitionParserRuleCall_2_2_0; }
		
		//'end' endState=State '}'
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'end'
		public Keyword getEndKeyword_2_3_0() { return cEndKeyword_2_3_0; }
		
		//endState=State
		public Assignment getEndStateAssignment_2_3_1() { return cEndStateAssignment_2_3_1; }
		
		//State
		public RuleCall getEndStateStateParserRuleCall_2_3_1_0() { return cEndStateStateParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3_2() { return cRightCurlyBracketKeyword_2_3_2; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//State:
		//	'state' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MessageTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFromKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cCurrentStateAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cCurrentStateStateParserRuleCall_2_2_0_0 = (RuleCall)cCurrentStateAssignment_2_2_0.eContents().get(0);
		private final Assignment cAnyStateAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final Keyword cAnyStateAnyKeyword_2_2_1_0 = (Keyword)cAnyStateAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cReceivedKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cMessagesKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Group cGroup_2_3_2 = (Group)cGroup_2_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cReceivedMessagesAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cReceivedMessagesMessageParserRuleCall_2_3_2_1_0 = (RuleCall)cReceivedMessagesAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3_2_2 = (Keyword)cGroup_2_3_2.eContents().get(2);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cSentKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Keyword cMessagesKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Group cGroup_2_4_2 = (Group)cGroup_2_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_4_2_0 = (Keyword)cGroup_2_4_2.eContents().get(0);
		private final Assignment cSentMessagesAssignment_2_4_2_1 = (Assignment)cGroup_2_4_2.eContents().get(1);
		private final RuleCall cSentMessagesMessageParserRuleCall_2_4_2_1_0 = (RuleCall)cSentMessagesAssignment_2_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4_2_2 = (Keyword)cGroup_2_4_2.eContents().get(2);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cGoKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cNextStateAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cNextStateStateParserRuleCall_2_5_1_0 = (RuleCall)cNextStateAssignment_2_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//MessageTransition:
		//	'transition' name=ID ('{'
		//	'from' (currentState=State | anyState='any') ('received' 'messages' ('{'
		//	receivedMessages+=Message*
		//	'}'))? ('sent' 'messages' ('{'
		//	sentMessages+=Message*
		//	'}'))? ('go' nextState=State)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ID ('{' 'from' (currentState=State | anyState='any') ('received' 'messages' ('{'
		//receivedMessages+=Message* '}'))? ('sent' 'messages' ('{' sentMessages+=Message* '}'))? ('go' nextState=State)? '}')?
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' 'from' (currentState=State | anyState='any') ('received' 'messages' ('{' receivedMessages+=Message* '}'))? ('sent'
		//'messages' ('{' sentMessages+=Message* '}'))? ('go' nextState=State)? '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//'from'
		public Keyword getFromKeyword_2_1() { return cFromKeyword_2_1; }
		
		//currentState=State | anyState='any'
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//currentState=State
		public Assignment getCurrentStateAssignment_2_2_0() { return cCurrentStateAssignment_2_2_0; }
		
		//State
		public RuleCall getCurrentStateStateParserRuleCall_2_2_0_0() { return cCurrentStateStateParserRuleCall_2_2_0_0; }
		
		//anyState='any'
		public Assignment getAnyStateAssignment_2_2_1() { return cAnyStateAssignment_2_2_1; }
		
		//'any'
		public Keyword getAnyStateAnyKeyword_2_2_1_0() { return cAnyStateAnyKeyword_2_2_1_0; }
		
		//('received' 'messages' ('{' receivedMessages+=Message* '}'))?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'received'
		public Keyword getReceivedKeyword_2_3_0() { return cReceivedKeyword_2_3_0; }
		
		//'messages'
		public Keyword getMessagesKeyword_2_3_1() { return cMessagesKeyword_2_3_1; }
		
		//'{' receivedMessages+=Message* '}'
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_3_2_0() { return cLeftCurlyBracketKeyword_2_3_2_0; }
		
		//receivedMessages+=Message*
		public Assignment getReceivedMessagesAssignment_2_3_2_1() { return cReceivedMessagesAssignment_2_3_2_1; }
		
		//Message
		public RuleCall getReceivedMessagesMessageParserRuleCall_2_3_2_1_0() { return cReceivedMessagesMessageParserRuleCall_2_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3_2_2() { return cRightCurlyBracketKeyword_2_3_2_2; }
		
		//('sent' 'messages' ('{' sentMessages+=Message* '}'))?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//'sent'
		public Keyword getSentKeyword_2_4_0() { return cSentKeyword_2_4_0; }
		
		//'messages'
		public Keyword getMessagesKeyword_2_4_1() { return cMessagesKeyword_2_4_1; }
		
		//'{' sentMessages+=Message* '}'
		public Group getGroup_2_4_2() { return cGroup_2_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_4_2_0() { return cLeftCurlyBracketKeyword_2_4_2_0; }
		
		//sentMessages+=Message*
		public Assignment getSentMessagesAssignment_2_4_2_1() { return cSentMessagesAssignment_2_4_2_1; }
		
		//Message
		public RuleCall getSentMessagesMessageParserRuleCall_2_4_2_1_0() { return cSentMessagesMessageParserRuleCall_2_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4_2_2() { return cRightCurlyBracketKeyword_2_4_2_2; }
		
		//('go' nextState=State)?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//'go'
		public Keyword getGoKeyword_2_5_0() { return cGoKeyword_2_5_0; }
		
		//nextState=State
		public Assignment getNextStateAssignment_2_5_1() { return cNextStateAssignment_2_5_1; }
		
		//State
		public RuleCall getNextStateStateParserRuleCall_2_5_1_0() { return cNextStateStateParserRuleCall_2_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStructKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStructEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStructEntriesMessageStructEntryParserRuleCall_2_1_1_0 = (RuleCall)cStructEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Message:
		//	'message' name=ID ('struct' ('{'
		//	structEntries+=MessageStructEntry+
		//	'}'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'message' name=ID ('struct' ('{' structEntries+=MessageStructEntry+ '}'))?
		public Group getGroup() { return cGroup; }
		
		//'message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('struct' ('{' structEntries+=MessageStructEntry+ '}'))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'struct'
		public Keyword getStructKeyword_2_0() { return cStructKeyword_2_0; }
		
		//'{' structEntries+=MessageStructEntry+ '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//structEntries+=MessageStructEntry+
		public Assignment getStructEntriesAssignment_2_1_1() { return cStructEntriesAssignment_2_1_1; }
		
		//MessageStructEntry
		public RuleCall getStructEntriesMessageStructEntryParserRuleCall_2_1_1_0() { return cStructEntriesMessageStructEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MessageStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStructEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStructEntriesMessageStructEntryParserRuleCall_2_1_0 = (RuleCall)cStructEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//MessageStruct:
		//	'struct' name=ID ('{'
		//	structEntries+=MessageStructEntry*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID ('{' structEntries+=MessageStructEntry* '}')?
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' structEntries+=MessageStructEntry* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//structEntries+=MessageStructEntry*
		public Assignment getStructEntriesAssignment_2_1() { return cStructEntriesAssignment_2_1; }
		
		//MessageStructEntry
		public RuleCall getStructEntriesMessageStructEntryParserRuleCall_2_1_0() { return cStructEntriesMessageStructEntryParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class MessageStructEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageStructEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDataTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cDataTypeDATATYPETerminalRuleCall_0_0_0 = (RuleCall)cDataTypeAssignment_0_0.eContents().get(0);
		private final Assignment cRefTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cRefTypeIDTerminalRuleCall_0_1_0 = (RuleCall)cRefTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENUMNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cByteRangeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cByteRangeMessageByteRangeParserRuleCall_2_0_0 = (RuleCall)cByteRangeAssignment_2_0.eContents().get(0);
		private final Assignment cByteSizeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cByteSizeMessageByteArrayParserRuleCall_2_1_0 = (RuleCall)cByteSizeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cDataAssignmentAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cDataAssignmentMessageStructureDatatypeParserRuleCall_3_1_0_0 = (RuleCall)cDataAssignmentAssignment_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MessageStructEntry:
		//	(dataType=DATATYPE | refType=ID) name=ENUMNAME (byteRange=MessageByteRange | byteSize=MessageByteArray)? ('='
		//	(dataAssignment+=MessageStructureDatatype ','?)+)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//(dataType=DATATYPE | refType=ID) name=ENUMNAME (byteRange=MessageByteRange | byteSize=MessageByteArray)? ('='
		//(dataAssignment+=MessageStructureDatatype ','?)+)? ';'
		public Group getGroup() { return cGroup; }
		
		//dataType=DATATYPE | refType=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//dataType=DATATYPE
		public Assignment getDataTypeAssignment_0_0() { return cDataTypeAssignment_0_0; }
		
		//DATATYPE
		public RuleCall getDataTypeDATATYPETerminalRuleCall_0_0_0() { return cDataTypeDATATYPETerminalRuleCall_0_0_0; }
		
		//refType=ID
		public Assignment getRefTypeAssignment_0_1() { return cRefTypeAssignment_0_1; }
		
		//ID
		public RuleCall getRefTypeIDTerminalRuleCall_0_1_0() { return cRefTypeIDTerminalRuleCall_0_1_0; }
		
		//name=ENUMNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ENUMNAME
		public RuleCall getNameENUMNAMETerminalRuleCall_1_0() { return cNameENUMNAMETerminalRuleCall_1_0; }
		
		//(byteRange=MessageByteRange | byteSize=MessageByteArray)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//byteRange=MessageByteRange
		public Assignment getByteRangeAssignment_2_0() { return cByteRangeAssignment_2_0; }
		
		//MessageByteRange
		public RuleCall getByteRangeMessageByteRangeParserRuleCall_2_0_0() { return cByteRangeMessageByteRangeParserRuleCall_2_0_0; }
		
		//byteSize=MessageByteArray
		public Assignment getByteSizeAssignment_2_1() { return cByteSizeAssignment_2_1; }
		
		//MessageByteArray
		public RuleCall getByteSizeMessageByteArrayParserRuleCall_2_1_0() { return cByteSizeMessageByteArrayParserRuleCall_2_1_0; }
		
		//('=' (dataAssignment+=MessageStructureDatatype ','?)+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//(dataAssignment+=MessageStructureDatatype ','?)+
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//dataAssignment+=MessageStructureDatatype
		public Assignment getDataAssignmentAssignment_3_1_0() { return cDataAssignmentAssignment_3_1_0; }
		
		//MessageStructureDatatype
		public RuleCall getDataAssignmentMessageStructureDatatypeParserRuleCall_3_1_0_0() { return cDataAssignmentMessageStructureDatatypeParserRuleCall_3_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1_1() { return cCommaKeyword_3_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class MessageByteRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageByteRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartINTTerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndINTTerminalRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MessageByteRange:
		//	'<' start=INT '..' end=INT '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' start=INT '..' end=INT '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//start=INT
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_1_0() { return cStartINTTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//end=INT
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_3_0() { return cEndINTTerminalRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class MessageByteArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageByteArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MessageByteArray:
		//	'[' size=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' size=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class MessageStructureStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageStructureStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesMessageStructureDatatypeParserRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MessageStructureStruct:
		//	'{' (values+=MessageStructureDatatype ','?)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (values+=MessageStructureDatatype ','?)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(values+=MessageStructureDatatype ','?)+
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=MessageStructureDatatype
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//MessageStructureDatatype
		public RuleCall getValuesMessageStructureDatatypeParserRuleCall_1_0_0() { return cValuesMessageStructureDatatypeParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class MessageStructureDatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageStructureDatatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHexValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHexValHEXTerminalRuleCall_0_0 = (RuleCall)cHexValAssignment_0.eContents().get(0);
		private final Assignment cEnumValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumValENUMNAMETerminalRuleCall_1_0 = (RuleCall)cEnumValAssignment_1.eContents().get(0);
		private final Assignment cStructValAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStructValMessageStructureStructParserRuleCall_2_0 = (RuleCall)cStructValAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cArrayValAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cArrayValMessageStructureDatatypeParserRuleCall_3_1_0_0 = (RuleCall)cArrayValAssignment_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//MessageStructureDatatype:
		//	hexVal=HEX | enumVal=ENUMNAME | structVal=MessageStructureStruct | '[' (arrayVal+=MessageStructureDatatype ','?)+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//hexVal=HEX | enumVal=ENUMNAME | structVal=MessageStructureStruct | '[' (arrayVal+=MessageStructureDatatype ','?)+ ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hexVal=HEX
		public Assignment getHexValAssignment_0() { return cHexValAssignment_0; }
		
		//HEX
		public RuleCall getHexValHEXTerminalRuleCall_0_0() { return cHexValHEXTerminalRuleCall_0_0; }
		
		//enumVal=ENUMNAME
		public Assignment getEnumValAssignment_1() { return cEnumValAssignment_1; }
		
		//ENUMNAME
		public RuleCall getEnumValENUMNAMETerminalRuleCall_1_0() { return cEnumValENUMNAMETerminalRuleCall_1_0; }
		
		//structVal=MessageStructureStruct
		public Assignment getStructValAssignment_2() { return cStructValAssignment_2; }
		
		//MessageStructureStruct
		public RuleCall getStructValMessageStructureStructParserRuleCall_2_0() { return cStructValMessageStructureStructParserRuleCall_2_0; }
		
		//'[' (arrayVal+=MessageStructureDatatype ','?)+ ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//(arrayVal+=MessageStructureDatatype ','?)+
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//arrayVal+=MessageStructureDatatype
		public Assignment getArrayValAssignment_3_1_0() { return cArrayValAssignment_3_1_0; }
		
		//MessageStructureDatatype
		public RuleCall getArrayValMessageStructureDatatypeParserRuleCall_3_1_0_0() { return cArrayValMessageStructureDatatypeParserRuleCall_3_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1_1() { return cCommaKeyword_3_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class MessageEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.MessageEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cNamesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNamesENUMNAMETerminalRuleCall_2_1_0_0 = (RuleCall)cNamesAssignment_2_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cValuesAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cValuesINTTerminalRuleCall_2_1_2_0 = (RuleCall)cValuesAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cCommaKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//MessageEnum:
		//	'enum'? name=ID ('{' (names+=ENUMNAME '(' values+=INT ')' ','?)+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum'? name=ID ('{' (names+=ENUMNAME '(' values+=INT ')' ','?)+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'enum'?
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' (names+=ENUMNAME '(' values+=INT ')' ','?)+ '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//(names+=ENUMNAME '(' values+=INT ')' ','?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//names+=ENUMNAME
		public Assignment getNamesAssignment_2_1_0() { return cNamesAssignment_2_1_0; }
		
		//ENUMNAME
		public RuleCall getNamesENUMNAMETerminalRuleCall_2_1_0_0() { return cNamesENUMNAMETerminalRuleCall_2_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }
		
		//values+=INT
		public Assignment getValuesAssignment_2_1_2() { return cValuesAssignment_2_1_2; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_2_1_2_0() { return cValuesINTTerminalRuleCall_2_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
		
		//','?
		public Keyword getCommaKeyword_2_1_4() { return cCommaKeyword_2_1_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final MessageTransitionElements pMessageTransition;
	private final TerminalRule tHEX;
	private final TerminalRule tDATATYPE;
	private final TerminalRule tENUMNAME;
	private final MessageElements pMessage;
	private final MessageStructElements pMessageStruct;
	private final MessageStructEntryElements pMessageStructEntry;
	private final MessageByteRangeElements pMessageByteRange;
	private final MessageByteArrayElements pMessageByteArray;
	private final MessageStructureStructElements pMessageStructureStruct;
	private final MessageStructureDatatypeElements pMessageStructureDatatype;
	private final MessageEnumElements pMessageEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateDefGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pMessageTransition = new MessageTransitionElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.HEX");
		this.tDATATYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.DATATYPE");
		this.tENUMNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.sudohenk.xtext.StateDef.ENUMNAME");
		this.pMessage = new MessageElements();
		this.pMessageStruct = new MessageStructElements();
		this.pMessageStructEntry = new MessageStructEntryElements();
		this.pMessageByteRange = new MessageByteRangeElements();
		this.pMessageByteArray = new MessageByteArrayElements();
		this.pMessageStructureStruct = new MessageStructureStructElements();
		this.pMessageStructureDatatype = new MessageStructureDatatypeElements();
		this.pMessageEnum = new MessageEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.sudohenk.xtext.StateDef".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// State machine
	//StateMachine:
	//	'machine' name=ID ('{' (globalStructs+=MessageStruct* & globalEnums+=MessageEnum* & messages+=Message*)
	//	// Finite State Machine description
	//	'initial' initState=State & states+=State* & transitions+=MessageTransition* &
	//	'end' endState=State
	//	'}')?;
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//State:
	//	'state' name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//MessageTransition:
	//	'transition' name=ID ('{'
	//	'from' (currentState=State | anyState='any') ('received' 'messages' ('{'
	//	receivedMessages+=Message*
	//	'}'))? ('sent' 'messages' ('{'
	//	sentMessages+=Message*
	//	'}'))? ('go' nextState=State)?
	//	'}')?;
	public MessageTransitionElements getMessageTransitionAccess() {
		return pMessageTransition;
	}
	
	public ParserRule getMessageTransitionRule() {
		return getMessageTransitionAccess().getRule();
	}
	
	//terminal HEX:
	//	'0x' ('a'..'f' | 'A'..'F' | '0'..'9')*;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal DATATYPE:
	//	'uint' ('8' | '16' | '24') | 'opaque';
	public TerminalRule getDATATYPERule() {
		return tDATATYPE;
	}
	
	//terminal ENUMNAME:
	//	'a'..'z' | '_'+;
	public TerminalRule getENUMNAMERule() {
		return tENUMNAME;
	}
	
	//Message:
	//	'message' name=ID ('struct' ('{'
	//	structEntries+=MessageStructEntry+
	//	'}'))?;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MessageStruct:
	//	'struct' name=ID ('{'
	//	structEntries+=MessageStructEntry*
	//	'}')?;
	public MessageStructElements getMessageStructAccess() {
		return pMessageStruct;
	}
	
	public ParserRule getMessageStructRule() {
		return getMessageStructAccess().getRule();
	}
	
	//MessageStructEntry:
	//	(dataType=DATATYPE | refType=ID) name=ENUMNAME (byteRange=MessageByteRange | byteSize=MessageByteArray)? ('='
	//	(dataAssignment+=MessageStructureDatatype ','?)+)?
	//	';';
	public MessageStructEntryElements getMessageStructEntryAccess() {
		return pMessageStructEntry;
	}
	
	public ParserRule getMessageStructEntryRule() {
		return getMessageStructEntryAccess().getRule();
	}
	
	//MessageByteRange:
	//	'<' start=INT '..' end=INT '>';
	public MessageByteRangeElements getMessageByteRangeAccess() {
		return pMessageByteRange;
	}
	
	public ParserRule getMessageByteRangeRule() {
		return getMessageByteRangeAccess().getRule();
	}
	
	//MessageByteArray:
	//	'[' size=INT ']';
	public MessageByteArrayElements getMessageByteArrayAccess() {
		return pMessageByteArray;
	}
	
	public ParserRule getMessageByteArrayRule() {
		return getMessageByteArrayAccess().getRule();
	}
	
	//MessageStructureStruct:
	//	'{' (values+=MessageStructureDatatype ','?)+
	//	'}';
	public MessageStructureStructElements getMessageStructureStructAccess() {
		return pMessageStructureStruct;
	}
	
	public ParserRule getMessageStructureStructRule() {
		return getMessageStructureStructAccess().getRule();
	}
	
	//MessageStructureDatatype:
	//	hexVal=HEX | enumVal=ENUMNAME | structVal=MessageStructureStruct | '[' (arrayVal+=MessageStructureDatatype ','?)+ ']';
	public MessageStructureDatatypeElements getMessageStructureDatatypeAccess() {
		return pMessageStructureDatatype;
	}
	
	public ParserRule getMessageStructureDatatypeRule() {
		return getMessageStructureDatatypeAccess().getRule();
	}
	
	//MessageEnum:
	//	'enum'? name=ID ('{' (names+=ENUMNAME '(' values+=INT ')' ','?)+
	//	'}')?;
	public MessageEnumElements getMessageEnumAccess() {
		return pMessageEnum;
	}
	
	public ParserRule getMessageEnumRule() {
		return getMessageEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
