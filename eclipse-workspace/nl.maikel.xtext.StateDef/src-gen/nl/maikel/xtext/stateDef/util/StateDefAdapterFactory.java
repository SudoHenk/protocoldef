/**
 * generated by Xtext 2.14.0
 */
package nl.sudohenk.xtext.stateDef.util;

import nl.sudohenk.xtext.stateDef.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.sudohenk.xtext.stateDef.StateDefPackage
 * @generated
 */
public class StateDefAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static StateDefPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateDefAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = StateDefPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateDefSwitch<Adapter> modelSwitch =
    new StateDefSwitch<Adapter>()
    {
      @Override
      public Adapter caseStateMachine(StateMachine object)
      {
        return createStateMachineAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseMessageTransition(MessageTransition object)
      {
        return createMessageTransitionAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseMessageStruct(MessageStruct object)
      {
        return createMessageStructAdapter();
      }
      @Override
      public Adapter caseMessageStructEntry(MessageStructEntry object)
      {
        return createMessageStructEntryAdapter();
      }
      @Override
      public Adapter caseMessageByteRange(MessageByteRange object)
      {
        return createMessageByteRangeAdapter();
      }
      @Override
      public Adapter caseMessageByteArray(MessageByteArray object)
      {
        return createMessageByteArrayAdapter();
      }
      @Override
      public Adapter caseMessageStructureStruct(MessageStructureStruct object)
      {
        return createMessageStructureStructAdapter();
      }
      @Override
      public Adapter caseMessageStructureDatatype(MessageStructureDatatype object)
      {
        return createMessageStructureDatatypeAdapter();
      }
      @Override
      public Adapter caseMessageEnum(MessageEnum object)
      {
        return createMessageEnumAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.StateMachine <em>State Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.StateMachine
   * @generated
   */
  public Adapter createStateMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageTransition <em>Message Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageTransition
   * @generated
   */
  public Adapter createMessageTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageStruct <em>Message Struct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageStruct
   * @generated
   */
  public Adapter createMessageStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageStructEntry <em>Message Struct Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageStructEntry
   * @generated
   */
  public Adapter createMessageStructEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageByteRange <em>Message Byte Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageByteRange
   * @generated
   */
  public Adapter createMessageByteRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageByteArray <em>Message Byte Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageByteArray
   * @generated
   */
  public Adapter createMessageByteArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageStructureStruct <em>Message Structure Struct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageStructureStruct
   * @generated
   */
  public Adapter createMessageStructureStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageStructureDatatype <em>Message Structure Datatype</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageStructureDatatype
   * @generated
   */
  public Adapter createMessageStructureDatatypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.sudohenk.xtext.stateDef.MessageEnum <em>Message Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.sudohenk.xtext.stateDef.MessageEnum
   * @generated
   */
  public Adapter createMessageEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //StateDefAdapterFactory
